url <- "C:\\Users\\paulo.jardim\\OneDrive\\Área de Trabalho\\UFPR - DS\\Censo.csv"
censo <- read.csv(url,
header = TRUE,
comment.char = "#",
stringsAsFactors = FALSE,
quote = "\"",
na.strings = "-")
str(censo)
censo <- read.csv(url,
header = TRUE,
comment.char = "#",
stringsAsFactors = FALSE,
quote = "\"",
na.strings = "-",
encoding = "UTF-8")
str(censo)
# Filtra apenas para a população residente.
censo <- censo %>%
filter(Nome == "População residente") %>%
select(Localidade, X2010) %>%
rename("População residente" = "X2010")
str(censo)
censo
# Cadastro de empresas.
url <- "C:\\Users\\paulo.jardim\\OneDrive\\Área de Trabalho\\UFPR - DS\\Cadastro Central de Empresas.csv"
cce <- read.csv(url,
header = TRUE,
comment.char = "#",
stringsAsFactors = FALSE,
quote = "\"",
na.strings = "-")
str(cce)
# Filtra para as variáveis de interesse.
u <- xtabs(~Nome, cce)
v <- names(u)[u == 399]
# Prepara a tabela com municípios nas linhas e morbidades nas colunas.
cce_2010 <- cce %>%
filter(Nome %in% v) %>%
mutate(Y = rowMeans(select(., X2008:X2010), na.rm = TRUE)) %>%
select(Nome, Localidade, Y) %>%
spread(key = "Nome", value = "Y")
# Junta com a população.
cce_2010 <- inner_join(cce_2010, censo)
# Dividir cada variável pela população residente.
cce_2010 <- cce_2010 %>%
mutate_at(v[-4], ~ ./`População residente`)
# Transformar para escala log base 10 os valores padronizados pelo
# quociente em relação ao mínimo.
curve(log10((x + 10)/10), from = 0, to = 1000)
# Transformar para escala log base 10 os valores padronizados pelo
# quociente em relação ao mínimo.
curve(log10((x + 10)/10), from = 0, to = 1000)
# Aplica a transformação.
tb <- cce_2010 %>%
mutate_if(is.numeric,
function(x) {
m <- min(x[x > 0])
log10((x + m)/m)
})
# Cria a matriz.
X <- as.matrix(tb[, v])
rownames(X) <- tb$Localidade
# Pares de diagramas de dispersão.
lattice::splom(X, as.matrix = TRUE)
X
cce <- read.csv(url,
header = TRUE,
comment.char = "#",
stringsAsFactors = FALSE,
quote = "\"",
na.strings = "-",
encoding = "UTF-8")
# Filtra para as variáveis de interesse.
u <- xtabs(~Nome, cce)
v <- names(u)[u == 399]
# Prepara a tabela com municípios nas linhas e morbidades nas colunas.
cce_2010 <- cce %>%
filter(Nome %in% v) %>%
mutate(Y = rowMeans(select(., X2008:X2010), na.rm = TRUE)) %>%
select(Nome, Localidade, Y) %>%
spread(key = "Nome", value = "Y")
# Junta com a população.
cce_2010 <- inner_join(cce_2010, censo)
# Dividir cada variável pela população residente.
cce_2010 <- cce_2010 %>%
mutate_at(v[-4], ~ ./`População residente`)
# Aplica a transformação.
tb <- cce_2010 %>%
mutate_if(is.numeric,
function(x) {
m <- min(x[x > 0])
log10((x + m)/m)
})
# Cria a matriz.
X <- as.matrix(tb[, v])
rownames(X) <- tb$Localidade
X
str(X)
names(X)
colnames(X)
# Distribuição marginal de cada variável.
ggplot(data = stack(as.data.frame(X)),
mapping = aes(x = values)) +
facet_wrap(facets = ~ind, scale = "free") +
geom_density() +
geom_rug()
# Pares de diagramas de dispersão.
lattice::splom(X, as.matrix = TRUE)
# Diagrama de correlação.
cx <- cor(X, use = "pairwise")
rownames(cx) <- colnames(cx) <- abbreviate(colnames(cx))
corrplot(cx)
# Desvio-padrão.
round(apply(X, MARGIN = 2, sd, na.rm = TRUE), digits = 4)
# Padroniza para mitigar efeito de escala.
X <- scale(X)
# Novos valores para terem a classe predita.
X_new <- c(`Número de empresas atuantes` = 1.27,
`Pessoal ocupado` = 1.276,
`Pessoal ocupado assalariado` = 1.308,
`Salário médio mensal` = 1.143,
`Salários e outras remunerações` = 1.373,
`Unidades locais` = 1.267)
# Distâncias entre cada par de observações.
dis <- dist(X, method = "euclidian")
dis
# Número de grupos.
k <- 3
# Agrupamento hierárquico.
hcl <- hclust(dis, method = "complete")
# Classe, métodos e conteúdo.
class(hcl)
methods(class = "hclust")
names(hcl)
# Algumas variáveis que podem ser úteis.
head(hcl$height)
head(hcl$merge)
# Dendograma.
layout(1)
plot(hcl, hang = -1)
# Classificação das observações.
clus <- cutree(tree = hcl, k = k)
table(clus)
# Visualização com identificação dos grupos no dendrograma.
fviz_dend(hcl, k = k)
# Gráfico da silhueta.
D <- daisy(X)
plot(silhouette(clus, D))
# Usando k vizinhos mais próximos para a classificação.
class::knn(train = X,
test = matrix(X_new, nrow = 1),
cl = cutree(tree = hcl, k = k),
k = 3,
prob = TRUE)
# Usando k vizinhos mais próximos para a classificação.
class::knn(train = X,
test = matrix(X_new, nrow = 1),
cl = cutree(tree = hcl, k = k),
k = 3,
prob = TRUE)
# Número ótimo de grupos para dois critérios.
fviz_nbclust(X, hcut, method = "wss")
fviz_nbclust(X, hcut, method = "silhouette")
# Vários critérios para a avaliação do número ótimo de grupos.
n_clus <- NbClust(data = X,
min.nc = 2,
max.nc = 8,
method = "complete")
layout(1)
table(clus)
# A nova observação com vetor de características dado no objeto X_new é alocada no mesmo grupo de Foz do Iguaçu
# quando o dendrograma é cortado para K=5 grupos e usa-se um (1 único) vizinho mais próximo para a predição.
# qual o grupo de Foz?
clus
# A nova observação com vetor de características dado no objeto X_new é alocada no mesmo grupo de Foz do Iguaçu
# quando o dendrograma é cortado para K=5 grupos e usa-se um (1 único) vizinho mais próximo para a predição.
# qual o grupo de Foz?
clus["Foz do Iguaçu"]
# e a nova observacao?
X_new
class::knn(train = X,
test = matrix(X_new, nrow = 1),
cl = cutree(tree = hcl, k = k),
k = 3,
prob = TRUE)
X["Foz do Iguaçu"] # 1
X
X["Abatiá "]
X["Abatiá ",]
X[["Abatiá ",]]
X[["Abatiá "]]
X
class(X)
X["Foz"]
X["Foz do Iguaçu"]
X$"Foz do Iguaçu"
typeof(X)
class(X)
str(X)
row.names(X)
X[1,1]
X[1,]
X["Foz",]
X
X["Irati                                  ",]
X["Irati",]
X["Foz do Iguaçu",]
# Novos valores para terem a classe predita.
X_new_teste <- c(`Número de empresas atuantes` = 0.6390162,
`Pessoal ocupado` = 0.6953265,
`Pessoal ocupado assalariado` =  0.6778622,
`Salário médio mensal` = 2.1879264,
`Salários e outras remunerações` = 1.2376637,
`Unidades locais` = 0.7036315)
class::knn(train = X,
test = matrix(X_new, nrow = 1),
cl = cutree(tree = hcl, k = k),
k = 3,
prob = TRUE)
# A nova observação com vetor de características dado no objeto X_new é alocada no mesmo grupo de Foz do Iguaçu
# quando o dendrograma é cortado para K=5 grupos e usa-se um (1 único) vizinho mais próximo para a predição.
# qual o grupo de Foz?
clus["Foz do Iguaçu"] # 1
# A nova observação com vetor de características dado no objeto X_new é alocada no mesmo grupo de Foz do Iguaçu
# quando o dendrograma é cortado para K=5 grupos e usa-se um (1 único) vizinho mais próximo para a predição.
# qual o grupo de Foz?
clus["Foz do Iguaçu"] # 1
class::knn(train = X,
test = matrix(X_new_teste, nrow = 1),
cl = cutree(tree = hcl, k = k),
k = 3,
prob = TRUE)
table(clus)
# Visualização com identificação dos grupos no dendrograma.
fviz_dend(hcl, k = k)
# Agrupamento hierárquico.
hcl <- hclust(dis, method = "complete")
?cutree
# Se for feito um corte na altura do dendrograma h = 6.5, então são criados 6 grupos. [TRUE]
# (análise visual)
clus <- cutree(tree = hcl, h = 6.5)
table(clus)
# e a nova observacao?
# Novos valores para terem a classe predita.
class::knn(train = X,
test = matrix(X_new, nrow = 1),
cl = cutree(tree = hcl, k = k),
k = 3,
prob = TRUE)
# Novos valores para terem a classe predita.
X_new <- c(`Número de empresas atuantes` = 1.27,
`Pessoal ocupado` = 1.276,
`Pessoal ocupado assalariado` = 1.308,
`Salário médio mensal` = 1.143,
`Salários e outras remunerações` = 1.373,
`Unidades locais` = 1.267)
# e a nova observacao?
# Novos valores para terem a classe predita.
class::knn(train = X,
test = matrix(X_new, nrow = 1),
cl = cutree(tree = hcl, k = k),
k = 3,
prob = TRUE)
?class::knn
clus <- cutree(tree = hcl, k = 5)
table(clus)
# A nova observação com vetor de características dado no objeto X_new é alocada no mesmo grupo de Foz do Iguaçu
# quando o dendrograma é cortado para K=5 grupos e usa-se um (1 único) vizinho mais próximo para a predição.
clus_b <- cutree(tree = hcl, k= 5)
clus_b["Foz do Iguaçu"] #
class::knn(train = X,
test = matrix(X_new, nrow = 1),
cl = clus_b,
k = 1,
prob = TRUE)
X["Foz do Iguaçu", ]
# e a nova observacao?
class::knn(train = X,
test = matrix(X_new, nrow = 1),
cl = clus_b,
k = 1,
prob = TRUE) #
# Com um corte na altura do dendrograma de h = 3, o grupo em que está Ponta Grossa fica com 14 observações.
clus_c <- cutree(tree = hcl, h = 3)
table(clus_c)
clus_c["Ponta Grossa"] # 2
# Com K=3, Curitiba ficou em um grupo isolado sendo a única observação do grupo.
clus_d <- cutree(tree = hcl, K = 3)
clus_d["Curitiba"] # 9
# Com K=3, Curitiba ficou em um grupo isolado sendo a única observação do grupo.
clus_d <- cutree(tree = hcl, K = 3)
# Com K=3, Curitiba ficou em um grupo isolado sendo a única observação do grupo.
clus_d <- cutree(tree = hcl, K = 3)
# A nova observação com vetor de características dado no objeto X_new é alocada no mesmo grupo de Foz do Iguaçu
# quando o dendrograma é cortado para K=5 grupos e usa-se um (1 único) vizinho mais próximo para a predição.    [FALSE]
# qual o grupo de Foz?
clus_b <- cutree(tree = hcl, k= 5)
# Com K=3, Curitiba ficou em um grupo isolado sendo a única observação do grupo.
clus_d <- cutree(tree = hcl, K= 3)
# Com K=3, Curitiba ficou em um grupo isolado sendo a única observação do grupo.
clus_d <- cutree(tree = hcl, K= 4)
# Com K=3, Curitiba ficou em um grupo isolado sendo a única observação do grupo.
clus_d <- cutree(tree = hcl, K= 5)
clus_b <- cutree(tree = hcl, k= 3)
# Com K=3, Curitiba ficou em um grupo isolado sendo a única observação do grupo.
clus_d <- cutree(tree = hcl, k= 3)
clus_d["Curitiba"] # 9
clus_d["Ponta Grossa"] # 9
clus_d["Curitiba"] # 9
table(clus_d)
# Com K=5, Maringá e Foz do Iguaçu ficaram no mesmo grupo.
clus_e <- cutree(tree = hcl, k= 5)
# Com K=5, Maringá e Foz do Iguaçu ficaram no mesmo grupo.
clus_e <- cutree(tree = hcl, k= 5)
clus_e[c("Maringá", "Foz do Iguaçu")] # 2
# Com K=4, Maringá e Pato Branco ficaram no mesmo grupo.
clus_f <- cutree(tree = hcl, k= 4)
clus_f[c("Maringá", "Pato Branco")] # 3 e 2
clus <- cutree(tree = hcl, h = 6.5)
table(clus)
clus_b <- cutree(tree = hcl, k= 5)
clus_b["Foz do Iguaçu"] # 2
# e a nova observacao?
class::knn(train = X,
test = matrix(X_new, nrow = 1),
cl = clus_b,
k = 1,  # um único vizinho para predição
prob = TRUE) # 3
# A nova observação com vetor de características dado no objeto X_new é alocada no mesmo grupo de Foz do Iguaçu
# quando o dendrograma é cortado para K=5 grupos e usa-se um (1 único) vizinho mais próximo para a predição.    [FALSE]
# qual o grupo de Foz?
clus_b <- cutree(tree = hcl, k= 5)
clus_b["Foz do Iguaçu"] # 2
# e a nova observacao?
class::knn(train = X,
test = matrix(X_new, nrow = 1),
cl = clus_b,
k = 1,  # um único vizinho para predição
prob = TRUE) # 3
# e a nova observacao?
class::knn(train = X,
test = matrix(X_new, nrow = 1),
cl = clus_b,
k = 1,  # um único vizinho para predição
prob = FALSE) # 3
# e a nova observacao?
class::knn(train = X,
test = matrix(X_new, nrow = 1),
cl = clus_b,
k = 1,  # um único vizinho para predição
prob = TRUE) # 3
# Com um corte na altura do dendrograma de h = 3, o grupo em que está Ponta Grossa fica com 14 observações. [TRUE]
clus_c <- cutree(tree = hcl, h = 3)
clus_c["Ponta Grossa"] # 9
table(clus_c)
# Com K=3, Curitiba ficou em um grupo isolado sendo a única observação do grupo. [FALSE]
clus_d <- cutree(tree = hcl, k= 3)
clus_d["Curitiba"] # 2
table(clus_d)
clus_d[clus_d==1]
clus_d[clus_d==3]
table(clus_d)
# Com K=5, Maringá e Foz do Iguaçu ficaram no mesmo grupo. [FALSE]
clus_e <- cutree(tree = hcl, k= 5)
clus_e[c("Maringá", "Foz do Iguaçu")] # 3 e 2
# Com K=5, Maringá e Foz do Iguaçu ficaram no mesmo grupo. [FALSE]
clus_e <- cutree(tree = hcl, k= 5)
clus_e[c("Maringá", "Foz do Iguaçu")] # 3 e 2
# Com K=4, Maringá e Pato Branco ficaram no mesmo grupo. [TRUE]
clus_f <- cutree(tree = hcl, k= 4)
clus_f[c("Maringá", "Pato Branco")] # 2 e 2
getwd
getwd()
choose.files
choose.files?
?choose.files
?read.csv
dados <- read.csv(choose.files(), header = T, sep=";")
dados <- read.csv(choose.files(), header = T, sep=";")
View(dados)
?View
View(dados)
nrow(dados)
# olhar a estrutura vai ser importante para o processo de discretização
str(dados)
?lapply()
type(dados)
typeof(dados)
class(dados)
dados[,2:5]
str(dados)
# transforming into factor
dados[,2:5] <- lapply(dados[,2:5])
?factor()
# transforming into factor
dados[,2:5] <- lapply(dados[,2:5], factor)
str(dados)
dados <- read.csv(choose.files(), header = T, sep=";")
# it'll be important to know the structure due to the discretization process
str(dados)
# transforming into factor
dados[,2:4] <- lapply(dados[,2:4], factor)
str(dados)
?as.numeric
dados$area <- as.numeric(dados$area)
dados$value <- as.numeric(dados$value)
str(dados)
dados$value <- as.numeric(dados$value)
# checking how many NAs were introduced
is.na(dados)
?apply()
# checking how many NAs were introduced
apply(is.na(dados), 2, sum()) # 2 means summing by columns
# checking how many NAs were introduced
apply(is.na(dados), 2, sum) # 2 means summing by columns
?na.omit()
# removing NAs
dados <- na.omit(dados)
# checking how many NAs were introduced
apply(is.na(dados), 2, sum) # 2 means summing by columns
nrow(dados)
# ---------------------------- #
# ---------  EDA  ------------ #
# ---------------------------- #
hist(dados$value)
summary(dados$value)
# Discretizing
require("bnlearn")
require("qgraph")
install.packages("qgraph")
require("qgraph")
names(dados)
#dados_d=dados
dados_d <- bnlearn::discretize(dados[,c(1,5)],
method='hartemink', breaks=3) # these are the default params
dados_d
dados_d=dados
dados_d[,c(1,5)] <- bnlearn::discretize(dados[,c(1,5)],
method='hartemink', breaks=3) # these are the default params
dados_d
str(dados_d)
# checking how are the categories now
boxplot(dados$value~dados_d$value)
table(dados_d[,5])
boxplot(dados$area~dados_d$area)
table(dados$area)
table(dados_d$area)
table(dados_d$valor)
table(dados_d$value)
# strong linear correlation between area and value
plot(dados$area, dados$value)
table(dados_d$area, dados_d$value)
levels(dados_d$area)
abline(v = c(123), col='red')
abline(v = c(123, 180), col='red')
levels(dados_d$value)
# ploting lines
abline(v = c(123, 180), col='red')
abline(h = c(1400000, 1850000), col='red')
# strong linear correlation between area and value, so let's check the correlation in continuous and discrete cases:
plot(dados$area, dados$value)
# ploting lines
abline(v = c(123, 180), h = c(1400000, 1850000), col='red')
?hc()
# creating the model (hill climb):
mod_hc <- hc(dados_d, score="k2")
# exploring the structure with qgraph
qgraph(mod_hc)
require("qgraph")
install.packages("installr")
library(installr)
updateR()
bn.mle$Buy
library(tidyverse)
library(bnlearn)
library(Rgraphviz)
setwd("C:/dev/bayesian-nets/tcc")
journey <- read.csv("customer_journey.csv", header = TRUE)
head(journey)
colnames(journey)
str(journey)
hist(journey$first_hr_sessions_minutes)
hist(journey[journey$first_hr_sessions_minutes > 0,]$first_hr_sessions_minutes)
journey <- journey %>% select(c(professional_email, did_sign_up,  invited_someone, returned_another_day,
completed_tour, is_lead_contacted, is_demo_scheduled, is_became_customer
))
str(journey)
# converting columns to factor
journey$professional_email <- as.factor(journey$professional_email)
journey$did_sign_up <- as.factor(journey$did_sign_up)
journey$invited_someone <- as.factor(journey$invited_someone)
journey$returned_another_day <- as.factor(journey$returned_another_day)
journey$completed_tour <- as.factor(journey$completed_tour)
journey$is_lead_contacted <- as.factor(journey$is_lead_contacted)
journey$is_demo_scheduled <- as.factor(journey$is_demo_scheduled)
journey$is_became_customer <- as.factor(journey$is_became_customer)
str(journey)
colnames(journey) <- c('ProEm', 'SgUp', 'Inv', 'Rtrn', 'Tour', 'Ctc', 'Demo', 'Buy')
# improving the black list 2
bl = data.frame(from = c("Buy", "Rtrn", "Ctc", "Tour", "Demo", "Demo", "Inv"), to = c("ProEm", "ProEm", "ProEm", "ProEm", "ProEm", "Ctc", "ProEm"))
learned <- hc(journey, blacklist=bl)
graphviz.plot(learned)
graphviz.plot(learned, layout="fdp")
graphviz.plot(learned, layout="circo")
#################################################
# ESTIMANDO PROBABILIDADES CONDICIONAIS LOCAIS
#################################################
bn.mle <- bn.fit(learned, data = journey, method = "mle")
str(bn.mle)
bn.mle$Buy
bn.mle$Buy*100
bn.mle$Buy
